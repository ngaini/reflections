How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Instead of going through the file and comparing them line by line
    , using the diff command we were able to pinpoint the differences between
    the tow files and find the bug easily


How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It will make undoing the errors in programs, easier. Also we can code with
     more confidance taking bolder steps knowing we can revert to a earlier
     version if at all it leads to alot of errors. Also it will save time in 
     going through my code and finding errors and resolve them. It will also 
     be able tp help me track my changes and compare my chaneges.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    I cannot think of any at the moment.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Sometimes a change in an application can affect more than one file and 
    in such a circumstance it makes more sense to commit this change to register
     the save in all the files. and since git deals with application development
    it must be one of the reasons git gut uses multile files in one commit feature.

How can you use the commands git log and git diff to view the history of files?

    git diff can be used to compare different files and help pin point changes or
     differences in them. where as git log will provide a log or history of the
     changes made on the file which will aid in version control


How might using version control make you more confident to make changes that
could break something?

    Knowing that i have a back of my previous version of files i can code 
    confident and thake bolder programming decisions with out having to
     worry about breaking my application .

Now that you have your workspace set up, what do you want to try using Git for?

    Try commiting code and putting code changes in different branches.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
    
    The pros of manually choosing when to create a commit is you can choose 
    when you need commit which can be after a adding a logical unit, where as
    issue with version having automatically saved are that you may sometimes
    have worked on only a part of a functional unit which might be a 
    incomplete and cannot be compiled, but it sill gets saved anyway, in
    this case the log will get cluttered with out any having much changes to it.
    A con that comes to my mind is that you have to remidn your self to 
    commit and may sometimes forget to make a commit for a long time.
